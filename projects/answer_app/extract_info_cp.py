# will generate the user interface and will allows us to perform
# quest against our data using atlast vector search and openai




from pymongo import MongoClient
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import MongoDBAtlasVectorSearch
from langchain.document_loaders import DirectoryLoader
from langchain.llms import openai
from langchain.chains import retrieval_qa
import gradio as gr # for creating frontend
from gradio.themes.base import Base
import key_param


# we are going to get sample documents
# we will load 3 text from our directory using DirectoryLoader


client = MongoClient(key_param.MONGO_URI)
dbName = "langchain_demo"
collectionName = "collection_of_text_blobs"
collection = client[dbName][collectionName]

# get embeddings
embeddings = OpenAIEmbeddings(openai_api_key=key_param.openai_api_key)

# get vector
vectorStore = MongoDBAtlasVectorSearch.from_documents(collection, embeddings )


# from langchain.chains import retrieval_qa

# qa_chain = retrieval_qa.RetrievalQA(vector_store.as_retriever(), llm=openai.OpenAI(api_key=openai_api_key))


def query_data(query):
    docs = vectorStore.similarity_search(query, k=1)
    as_output = docs[0].page_content

    llm = openai(openai_api_key=key_param.openai_api_key, temperature=0)
    retriever = vectorStore.as_retriever()
    qa = retrieval_qa.RetrievalQA.from_chain_type(llm, chain_type="stuff", retriever=retriever)
    # qa = retrieval_qa.from_chain_type(llm, chain_type="stuff", retriever=retriever)
    retriever_output = qa.run(query) #execute chain

    return as_output, retriever_output


with gr.Blocks(theme=Base(), title="Question Asnwering App using Vector Search + RAG") as demo:
    gr.Markdown( """# Question Answering App using Atlas Vector Search + RAG Architecture""")
    textbox = gr.Textbox(label="Enter your Question:")
    with gr.Row():
        button = gr.Button("Submit", variant="primary")
    with gr.Column():
        output1 = gr.Textbox(lines=1, max_lines=10, label="Output with just Atlas Vector Search (returns text field as is):")
        output2 = gr.Textbox(lines=1, max_lines=10, label="Output generated by changing Atlas vector search to Langchain's RetrievalQA + openAI LLM:)")

    button.click(query_data, textbox, outputs=[output1, output2])

demo.launch()