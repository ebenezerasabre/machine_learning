from pymongo import MongoClient
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain_community.vectorstores import MongoDBAtlasVectorSearch
from langchain_community.llms import OpenAI
from langchain.chains import RetrievalQA
import gradio as gr
from gradio.themes.base import Base
import key_param


# Connect to MongoDB
client = MongoClient(key_param.MONGO_URI)
dbName = "langchain_demo"
collectionName = "collection_of_text_blobs"
collection = client[dbName][collectionName]

# Fetch documents from MongoDB
documents = list(collection.find({}, {"_id": 0, "text": 1}))  # Adjust the query as needed
texts = [doc['text'] for doc in documents]


# Get embeddings
embeddings = OpenAIEmbeddings(openai_api_key=key_param.openai_api_key)

# Create vector store from documents and specify the MongoDB collection
vectorStore = MongoDBAtlasVectorSearch.from_texts(texts, embeddings, collection=collection)


# Create vector store from documents and specify the MongoDB collection
# vectorStore = MongoDBAtlasVectorSearch.from_documents(collection, embeddings)



# Query processing
def query_data(query):
    docs = vectorStore.similarity_search(query, k=1)
    as_output = docs[0].page_content

    llm = OpenAI(openai_api_key=key_param.openai_api_key, temperature=0)
    retriever = vectorStore.as_retriever()
    
    # Correct instantiation of RetrievalQA
    qa = RetrievalQA.from_chain_type(llm=llm, chain_type="stuff", retriever=retriever)
    retriever_output = qa.run(query)

    return as_output, retriever_output



# Gradio UI setup
with gr.Blocks(theme=Base(), title="Question Answering App using Vector Search + RAG") as demo:
    gr.Markdown("""# Question Answering App using Atlas Vector Search + RAG Architecture""")
    textbox = gr.Textbox(label="Enter your Question:")
    with gr.Row():
        button = gr.Button("Submit", variant="primary")
    with gr.Column():
        output1 = gr.Textbox(lines=1, max_lines=10, label="Output with just Atlas Vector Search (returns text field as is):")
        output2 = gr.Textbox(lines=1, max_lines=10, label="Output generated by changing Atlas vector search to Langchain's RetrievalQA + openAI LLM:)")

    button.click(query_data, textbox, outputs=[output1, output2])

demo.launch()
